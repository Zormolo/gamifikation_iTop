<?xml version="1.0" encoding="UTF-8"?>
<itop_design xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.0">
  <constants>
  </constants>
  <classes>
      <class id="Playerinfo" _delta="define">
       <parent>cmdbAbstractObject</parent>
      <properties>
        <category>bizmodel,searchable</category>
        <abstract>false</abstract>
        <key_type>autoincrement</key_type>
        <db_table>playerinfo</db_table>
        <db_key_field>id</db_key_field>
        <db_final_class_field>finalclass</db_final_class_field>
        <naming>
          <format>%1$s</format>
          <attributes>
            <attribute id="nickname"/>
          </attributes>
        </naming>
        <display_template/>
        <reconciliation>
          <attributes>
            <attribute id="player"/>
            <attribute id="nickname"/>
          </attributes>
        </reconciliation>
        <uniqueness_rules>
          <rule id="nickname_uniqueness" _delta="define">
            <attributes>
              <attribute id="nickname"/>
            </attributes>
          </rule>
        </uniqueness_rules>
      </properties>
      <fields>
        <field id="nickname" xsi:type="AttributeString" _delta="define">
          <sql>nickname</sql>
          <default_value>Player</default_value>
          <is_null_allowed>false</is_null_allowed>
        </field>
        <field id="player" xsi:type="AttributeExternalKey">
          <sql>player</sql>
          <is_null_allowed>false</is_null_allowed>
          <on_target_delete>DEL_AUTO</on_target_delete>
          <target_class>User</target_class>
          <filter>SELECT User WHERE id NOT IN (SELECT User AS u JOIN Playerinfo AS p ON p.player = u.id)</filter>
        </field>
        <field id="gender" xsi:type="AttributeEnum" _delta="define">
          <values>
            <value id="male">male</value>
            <value id="female">female</value>
          </values>
          <sql>gender</sql>
          <default_value>male</default_value>
          <is_null_allowed>false</is_null_allowed>
        </field>
        <field id="exp" xsi:type="AttributeInteger" _delta="define">
          <sql>exp</sql>
          <default_value>0</default_value>
          <is_null_allowed>false</is_null_allowed>
        </field>
        <field id="lv" xsi:type="AttributeInteger" _delta="define">
          <sql>lv</sql>
          <default_value>1</default_value>
          <is_null_allowed>false</is_null_allowed>
        </field>
        <field id="lv_progress" xsi:type="AttributePercentage" _delta="define">
          <sql>lv_progress</sql>
          <default_value>0</default_value>
          <is_null_allowed>false</is_null_allowed>
        </field>              
        <field id="score" xsi:type="AttributeInteger" _delta="define">
          <sql>score</sql>
          <default_value>0</default_value>
          <is_null_allowed>false</is_null_allowed>
        </field>
        <field id="icon" xsi:type="AttributeImage" _delta="define">
          <display_max_width>256</display_max_width>
          <display_max_height>256</display_max_height>
          <default_image>images/default.png</default_image>
          <is_null_allowed>false</is_null_allowed>
        </field>
      </fields>
      <presentation>
        <details>
          <items>
            <item id="col:col1">
              <rank>5</rank>
              <items>
                <item id="fieldset:Playerinformation">
                  <rank>10</rank>
                  <items>
                    <item id="nickname">
                    <rank>10</rank>
                    </item>
                    <item id="player">
                      <rank>20</rank>
                    </item>
                    <item id="gender">
                      <rank>30</rank>
                    </item>
                  </items>
                </item>
                <item id="fieldset:Accountinformation">
                  <rank>10</rank>
                  <items>
                    <item id="exp">
                      <rank>40</rank>
                    </item>
                    <item id="lv">
                      <rank>50</rank>
                    </item>
                    <item id="lv_progress">
                      <rank>60</rank>
                    </item>
                    <item id="score">
                      <rank>70</rank>
                    </item>
                  </items>
                </item>
              </items>
            </item>
            <item id="col:col2">
              <rank>5</rank>
              <items>
                <item id="fieldset:Playericon">
                  <rank>10</rank>
                  <items>
                    <item id="icon">
                      <rank>10</rank>
                    </item>
                  </items>
                </item>
              </items>
            </item>
          </items>
        </details>
      </presentation>
      <methods>
       <method id="GetExp" _delta="define">
          <static>false</static>
          <access>protected</access>
          <type>Custom</type>
          <code>
            <![CDATA[
            protected function GetExp($lv)
            {
              if($lv == 25) return 1;

              return (int)((5 * pow($lv, 3)) / 4.0);
            }
            ]]>
          </code>
        </method>
        <method id="ComputeEXP" _delta="define">
          <static>false</static>
          <access>protected</access>
          <type>Custom</type>
          <code>
            <![CDATA[
            protected function ComputeEXP()
            {
              $aktuelles_lv = $this->Get('lv');
              $this->Set('score', $this->Get('score') + 1);
              if($aktuelles_lv < 25)
              {
                $next_lv = $aktuelles_lv + 1;
                error_log($this->GetExp($next_lv));
                $progress = (int)(($this->Get('exp') * 100.0) / $this->GetExp($next_lv));
                $this->Set('lv_progress', $progress);
                if($progress >= 100)
                {
                  $this->Set('lv', $next_lv);
                  if($next_lv == 25)
                  {
                    $this->Set('exp', 0);
                    $this->Set('lv_progress', 100);
                  }
                  else
                  {
                    $this->Set('exp', $this->Get('exp') - $this->GetExp($next_lv));
                    $progress = (int)(($this->Get('exp') / $this->GetExp($next_lv + 1)) * 100);
                    $this->Set('lv_progress', $progress);
                  }
                }
              }
              else
              {
                $this->Set('lv_progress', 100);
              }
            }
            ]]>
          </code>
        </method>
        <method id="OnUpdate" _delta="define">
          <static>false</static>
          <access>protected</access>
          <type>Custom</type>
          <code>
            <![CDATA[
            protected function OnUpdate()
            {
              $aChanges = $this->ListChanges();  
              if (array_key_exists('exp', $aChanges))
              {
                  $this->ComputeEXP();
              }
            }
            ]]>
          </code>
        </method>
        <method id="GetAttributeFlags">
          <static>false</static>
          <access>public</access>
          <type>Custom</type>
          <code>
            <![CDATA[
            public function GetAttributeFlags($sAttCode, &$aReasons = array(), $sTargetState = '')
            {
              // Force the computed field to be read-only, preventing it to be written
              $lv_4 = (($sAttCode == 'nickname') && $this->Get('lv') < 4);
              $lv_12 = (($sAttCode == 'icon') && $this->Get('lv') < 12);
              if (($sAttCode == 'exp') || ($sAttCode == 'gender') || ($sAttCode == 'player') || ($sAttCode == 'lv') || ($sAttCode == 'lv_progress') || ($sAttCode == 'score') || $lv_4 || $lv_12)
                    return(OPT_ATT_READONLY | parent::GetAttributeFlags($sAttCode, $aReasons, $sTargetState));
              return parent::GetAttributeFlags($sAttCode, $aReasons, $sTargetState);
            }
            ]]>
          </code>
        </method>
        <method id="GetInitialStateAttributeFlags">
          <static>false</static>
          <access>public</access>
          <type>Custom</type>
          <code>
            <![CDATA[
            public function GetInitialStateAttributeFlags($sAttCode, &$aReasons = array())
            {       
                // This function is invoked when the object is CREATED on the Console
                // It is called for each and every field of the object, 
                // but we just want to change the behavior for a single field
                if (($sAttCode == 'exp') || ($sAttCode == 'lv') || ($sAttCode == 'lv_progress') || ($sAttCode == 'icon') || ($sAttCode == 'score'))
                {
                    // Combine the new Flag with those imposed by a parent class
                    return(OPT_ATT_READONLY | parent::GetInitialStateAttributeFlags($sAttCode, $aReasons));
                }
                // For other fields ask the parent class to do the job
                return parent::GetInitialStateAttributeFlags($sAttCode, $aReasons);
            }
            ]]>
          </code>
        </method>
      </methods>
    </class>

    <class id="FunctionalCI" _delta="if_exists">
      <fields/>
      <presentation/>
      <methods>
        <method id="OnInsert" _delta="define">
          <static>false</static>
          <access>protected</access>
          <type>Custom</type>
          <code>
            <![CDATA[
            protected function OnInsert()
            {       
              $sOQL = "SELECT Playerinfo WHERE player = :current_user->id";
              try{
                $oSearch = DBObjectSearch::FromOQL($sOQL);
                $oSearch->AllowAllData();
              }
              catch (OQLException $e)
              {
                $this->m_aWebrequestErrors[] = "query syntax error for recipient '$sOqlAttCode'";
                return $e->getMessage();
              }
              $oSet = new DBObjectSet($oSearch, array() /* order */, array());
              if($oSet->Count() > 0)
              {
			          $oObj = $oSet->Fetch();
                $oObj->Set('exp', $oObj->Get('exp') + 5);
                $oObj->DBUpdate();
              } 
              else{
                return;
              }
            }
            ]]>
          </code>
        </method>
        <method id="OnUpdate" _delta="define">
          <static>false</static>
          <access>protected</access>
          <type>Custom</type>
          <code>
            <![CDATA[
            protected function OnUpdate()
            {       
              $sOQL = "SELECT Playerinfo WHERE player = :current_user->id";
              try{
                $oSearch = DBObjectSearch::FromOQL($sOQL);
                $oSearch->AllowAllData();
              }
              catch (OQLException $e)
              {
                $this->m_aWebrequestErrors[] = "query syntax error for recipient '$sOqlAttCode'";
                return $e->getMessage();
              }
              $oSet = new DBObjectSet($oSearch, array() /* order */, array());
              if($oSet->Count() > 0)
              {
			          $oObj = $oSet->Fetch();
                $oObj->Set('exp', $oObj->Get('exp') + 1);
                $oObj->DBUpdate();
              } 
              else{
                return;
              }
            }
            ]]>
          </code>
        </method>
        <method id="OnDelete" _delta="define">
          <static>false</static>
          <access>protected</access>
          <type>Custom</type>
          <code>
            <![CDATA[
            protected function OnDelete()
            {       
              $sOQL = "SELECT Playerinfo WHERE player = :current_user->id";
              try{
                $oSearch = DBObjectSearch::FromOQL($sOQL);
                $oSearch->AllowAllData();
              }
              catch (OQLException $e)
              {
                $this->m_aWebrequestErrors[] = "query syntax error for recipient '$sOqlAttCode'";
                return $e->getMessage();
              }
              $oSet = new DBObjectSet($oSearch, array() /* order */, array());
              if($oSet->Count() > 0)
              {
			          $oObj = $oSet->Fetch();
                $oObj->Set('exp', $oObj->Get('exp') + 3);
                $oObj->DBUpdate();
              } 
              else{
                return;
              }
            }
            ]]>
          </code>
        </method>
      </methods>
    </class>

    <class id="Ticket" _delta="if_exists">
      <fields/>
      <presentation/>
      <methods>
        <method id="OnInsert" _delta="define">
          <static>false</static>
          <access>protected</access>
          <type>Custom</type>
          <code>
            <![CDATA[
            protected function OnInsert()
            {       
              $sOQL = "SELECT Playerinfo WHERE player = :current_user->id";
              try{
                $oSearch = DBObjectSearch::FromOQL($sOQL);
                $oSearch->AllowAllData();
              }
              catch (OQLException $e)
              {
                $this->m_aWebrequestErrors[] = "query syntax error for recipient '$sOqlAttCode'";
                return $e->getMessage();
              }
              $oSet = new DBObjectSet($oSearch, array() /* order */, array());
              if($oSet->Count() > 0)
              {
			          $oObj = $oSet->Fetch();
                $oObj->Set('exp', $oObj->Get('exp') + 5);
                $oObj->DBUpdate();
              } 
              else{
                return;
              }
            }
            ]]>
          </code>
        </method>
        <method id="OnUpdate" _delta="define">
          <static>false</static>
          <access>protected</access>
          <type>Custom</type>
          <code>
            <![CDATA[
            protected function OnUpdate()
            {       
              $sOQL = "SELECT Playerinfo WHERE player = :current_user->id";
              try{
                $oSearch = DBObjectSearch::FromOQL($sOQL);
                $oSearch->AllowAllData();
              }
              catch (OQLException $e)
              {
                $this->m_aWebrequestErrors[] = "query syntax error for recipient '$sOqlAttCode'";
                return $e->getMessage();
              }
              $oSet = new DBObjectSet($oSearch, array() /* order */, array());
              if($oSet->Count() > 0)
              {
			          $oObj = $oSet->Fetch();
                $oObj->Set('exp', $oObj->Get('exp') + 1);
                $oObj->DBUpdate();
              } 
              else{
                return;
              }
            }
            ]]>
          </code>
        </method>
        <method id="OnDelete" _delta="define">
          <static>false</static>
          <access>protected</access>
          <type>Custom</type>
          <code>
            <![CDATA[
            protected function OnDelete()
            {       
              $sOQL = "SELECT Playerinfo WHERE player = :current_user->id";
              try{
                $oSearch = DBObjectSearch::FromOQL($sOQL);
                $oSearch->AllowAllData();
              }
              catch (OQLException $e)
              {
                $this->m_aWebrequestErrors[] = "query syntax error for recipient '$sOqlAttCode'";
                return $e->getMessage();
              }
              $oSet = new DBObjectSet($oSearch, array() /* order */, array());
              if($oSet->Count() > 0)
              {
			          $oObj = $oSet->Fetch();
                $oObj->Set('exp', $oObj->Get('exp') + 3);
                $oObj->DBUpdate();
              } 
              else{
                return;
              }
            }
            ]]>
          </code>
        </method>
      </methods>
    </class>

    <class id="Incident" _delta="if_exists">
      <fields/>
      <presentation/>
      <lifecycle>
        <attribute/>
        <stimuli/>
        <states>
          <state id="new" _delta="if_exists">
            <flags/>
            <transitions>
              <transition id="ev_assign" _delta="redefine">
                <target>assigned</target>
                <actions>
                  <action>
                    <verb>SetCurrentDate</verb>
                    <params>
                      <param xsi:type="attcode">assignment_date</param>
                    </params>
                  </action>
                  <action>
                    <verb>GainEXP</verb>
                    <params>
                      <param xsi:type="int">5</param>
                    </params>
                  </action>
                </actions>
              </transition>
            </transitions>
          </state>
          <state id="escalated_tto" _delta="if_exists">
            <flags/>
            <transitions>
              <transition id="ev_assign" _delta="redefine">
								<target>assigned</target>
								<actions>
									<action>
										<verb>SetAssignedDate</verb>
									</action>
                  <action>
                    <verb>GainEXP</verb>
                    <params>
                      <param xsi:type="int">5</param>
                    </params>
                  </action>
								</actions>
							</transition>
            </transitions>
          </state>
           <state id="assigned" _delta="if_exists">
            <flags/>
            <transitions>
              <transition id="ev_reassign" _delta="redefine">
								<target>assigned</target>
								<flags>
									<attribute id="agent_id">
										<must_change/>
									</attribute>
									<attribute id="team_id">
										<must_prompt/>
									</attribute>
								</flags>
                <actions>
                  <action>
                    <verb>GainEXP</verb>
                    <params>
                      <param xsi:type="int">5</param>
                    </params>
                  </action>
                </actions>
							</transition>
              <transition id="ev_resolve" _delta="redefine">
								<target>resolved</target>
								<actions>
									<action>
										<verb>SetCurrentDate</verb>
										<params>
											<param xsi:type="attcode">resolution_date</param>
										</params>
									</action>
									<action>
										<verb>SetElapsedTime</verb>
										<params>
											<param xsi:type="attcode">time_spent</param>
											<param xsi:type="attcode">start_date</param>
											<param xsi:type="string">DefaultWorkingTimeComputer</param>
										</params>
									</action>
									<action>
										<verb>ResolveChildTickets</verb>
										<params/>
									</action>
                  <action>
                    <verb>GainEXP</verb>
                    <params>
                      <param xsi:type="int">25</param>
                    </params>
                  </action>
								</actions>
							</transition>
            </transitions>
          </state>
          <state id="escalated_ttr" _delta="if_exists">
            <flags/>
            <transitions>
              <transition id="ev_reassign" _delta="redefine">
								<target>assigned</target>
								<actions>
                  <action>
                    <verb>GainEXP</verb>
                    <params>
                      <param xsi:type="int">5</param>
                    </params>
                  </action>
                </actions>
							</transition>
              <transition id="ev_resolve" _delta="redefine">
								<target>resolved</target>
								<actions>
									<action>
										<verb>SetCurrentDate</verb>
										<params>
											<param xsi:type="attcode">resolution_date</param>
										</params>
									</action>
									<action>
										<verb>SetElapsedTime</verb>
										<params>
											<param xsi:type="attcode">time_spent</param>
											<param xsi:type="attcode">start_date</param>
											<param xsi:type="string">DefaultWorkingTimeComputer</param>
										</params>
									</action>
									<action>
										<verb>ResolveChildTickets</verb>
										<params/>
									</action>
                  <action>
                    <verb>GainEXP</verb>
                    <params>
                      <param xsi:type="int">25</param>
                    </params>
                  </action>
								</actions>
							</transition>
            </transitions>
          </state>
          <state id="pending" _delta="if_exists">
            <flags/>
            <transitions>
              <transition id="ev_assign" _delta="redefine">
								<target>assigned</target>
								<actions>
                  <action>
                    <verb>GainEXP</verb>
                    <params>
                      <param xsi:type="int">5</param>
                    </params>
                  </action>
                </actions>
							</transition>
            </transitions>
          </state>
          <state id="resolved" _delta="if_exists">
            <flags/>
            <transitions>
              <transition id="ev_reopen" _delta="redefine">
								<target>assigned</target>
								<actions>
                  <action>
                    <verb>GainEXP</verb>
                    <params>
                      <param xsi:type="int">5</param>
                    </params>
                  </action>
                </actions>
							</transition>
              <transition id="ev_close" _delta="redefine">
								<target>closed</target>
								<actions>
									<action>
										<verb>SetCurrentDate</verb>
										<params>
											<param xsi:type="attcode">close_date</param>
										</params>
									</action>
                  <action>
										<verb>GainBonusEXP</verb>
										<params>
											<param xsi:type="int">5</param>
										</params>
									</action>
								</actions>
							</transition>
            </transitions>
          </state>
        </states>
      </lifecycle>
      <methods>
      	<method id="GainEXP" _delta="define">
        <static>false</static>
        <access>public</access>
        <type>LifecycleAction</type>
        <code>
          <![CDATA[	
          public function GainEXP($exp)
          {      
            $sOQL = "SELECT Playerinfo WHERE player = :current_user->id";
            try{
              $oSearch = DBObjectSearch::FromOQL($sOQL);
              $oSearch->AllowAllData();
            }
            catch (OQLException $e)
            {
              $this->m_aWebrequestErrors[] = "query syntax error for recipient '$sOqlAttCode'";
              return $e->getMessage();
            }
            $oSet = new DBObjectSet($oSearch, array() /* order */, array());
            if($oSet->Count() > 0)
            {
              $oObj = $oSet->Fetch();
              $oObj->Set('exp', $oObj->Get('exp') + $exp);
              $oObj->DBUpdate();
            } 
            else{
              return;
            }
          }]]>
        </code>
				</method>
        <method id="GainBonusEXP" _delta="define">
          <static>false</static>
          <access>public</access>
          <type>LifecycleAction</type>
          <code>
            <![CDATA[	
            public function GainBonusEXP($exp)
            {      
              $agent_id = $this->Get('agent_id');
              $sOQL = "SELECT Playerinfo WHERE player = $agent_id";
              try{
                $oSearch = DBObjectSearch::FromOQL($sOQL);
                $oSearch->AllowAllData();
              }
              catch (OQLException $e)
              {
                $this->m_aWebrequestErrors[] = "query syntax error for recipient '$sOqlAttCode'";
                return $e->getMessage();
              }
              $oSet = new DBObjectSet($oSearch, array() /* order */, array());
              if($oSet->Count() > 0)
              {
                if($this->Get('user_satisfaction') == 4) $exp *= 0;
                if($this->Get('user_satisfaction') == 3) $exp *= 0.5;
                //user_satisfaction == 2 exp bleibt gleich
                if($this->Get('user_satisfaction') == 1) $exp *= 2;
                $exp = (int) $exp;
                $oObj = $oSet->Fetch();
                $oObj->Set('exp', $oObj->Get('exp') + $exp);
                $oObj->DBUpdate();
              } 
              else{
                return;
              }
            }]]>
          </code>
				</method>
      </methods>
    </class>

    <class id="UserRequest" _delta="if_exists">
      <fields/>
      <presentation/>
      <lifecycle>
        <attribute/>
        <stimuli/>
        <states>
          <state id="new" _delta="if_exists">
            <flags/>
            <transitions>
              <transition id="ev_assign" _delta="redefine">
								<target>assigned</target>
								<actions>
									<action>
										<verb>SetCurrentDate</verb>
										<params>
											<param xsi:type="attcode">assignment_date</param>
										</params>
									</action>
                  <action>
                    <verb>GainEXP</verb>
                    <params>
                      <param xsi:type="int">5</param>
                    </params>
                  </action>
								</actions>
							</transition>
            </transitions>
          </state>
          <state id="escalated_tto" _delta="if_exists">
            <flags/>
            <transitions>
              <transition id="ev_assign" _delta="redefine">
								<target>assigned</target>
								<actions>
									<action>
										<verb>SetCurrentDate</verb>
										<params>
											<param xsi:type="attcode">assignment_date</param>
										</params>
									</action>
                  <action>
                    <verb>GainEXP</verb>
                    <params>
                      <param xsi:type="int">5</param>
                    </params>
                  </action>
								</actions>
							</transition>
            </transitions>
          </state>
           <state id="assigned" _delta="if_exists">
            <flags/>
            <transitions>
              <transition id="ev_reassign" _delta="redefine">
								<target>assigned</target>
								<flags>
									<attribute id="agent_id">
										<must_change/>
									</attribute>
									<attribute id="team_id">
										<must_prompt/>
									</attribute>
								</flags>
                <actions>
                  <action>
                    <verb>GainEXP</verb>
                    <params>
                      <param xsi:type="int">5</param>
                    </params>
                  </action>
                </actions>
							</transition>
              <transition id="ev_resolve" _delta="redefine">
								<target>resolved</target>
								<actions>
									<action>
										<verb>SetCurrentDate</verb>
										<params>
											<param xsi:type="attcode">resolution_date</param>
										</params>
									</action>
									<action>
										<verb>SetElapsedTime</verb>
										<params>
											<param xsi:type="attcode">time_spent</param>
											<param xsi:type="attcode">start_date</param>
											<param xsi:type="string">DefaultWorkingTimeComputer</param>
										</params>
									</action>
									<action>
										<verb>ResolveChildTickets</verb>
										<params/>
									</action>
                  <action>
                    <verb>GainEXP</verb>
                    <params>
                      <param xsi:type="int">25</param>
                    </params>
                  </action>
								</actions>
							</transition>
            </transitions>
          </state>
          <state id="escalated_ttr" _delta="if_exists">
            <flags/>
            <transitions>
							<transition id="ev_reassign" _delta="redefine">
								<target>assigned</target>
                <actions>
								  <action>
                    <verb>GainEXP</verb>
                    <params>
                      <param xsi:type="int">5</param>
                    </params>
                  </action>
                </actions>
							</transition>
              <transition id="ev_resolve" _delta="redefine">
								<target>resolved</target>
								<actions>
									<action>
										<verb>SetCurrentDate</verb>
										<params>
											<param xsi:type="attcode">resolution_date</param>
										</params>
									</action>
									<action>
										<verb>SetElapsedTime</verb>
										<params>
											<param xsi:type="attcode">time_spent</param>
											<param xsi:type="attcode">start_date</param>
											<param xsi:type="string">DefaultWorkingTimeComputer</param>
										</params>
									</action>
									<action>
										<verb>ResolveChildTickets</verb>
										<params/>
									</action>
                  <action>
                    <verb>GainEXP</verb>
                    <params>
                      <param xsi:type="int">25</param>
                    </params>
                  </action>
								</actions>
              </transition>
            </transitions>
          </state>
          <state id="approved" _delta="if_exists">
						<transitions>
							<transition id="ev_assign" _delta="redefine">
								<target>assigned</target>
								<actions>
									<action>
										<verb>SetCurrentDate</verb>
										<params>
											<param xsi:type="attcode">assignment_date</param>
										</params>
									</action>
                  <action>
                    <verb>GainEXP</verb>
                    <params>
                      <param xsi:type="int">5</param>
                    </params>
                  </action>
								</actions>
							</transition>
						</transitions>
					</state>
          <state id="pending" _delta="if_exists">
            <flags/>
            <transitions>
              <transition id="ev_assign" _delta="redefine">
								<target>assigned</target>
								<actions>
                   <action>
                    <verb>GainEXP</verb>
                    <params>
                      <param xsi:type="int">5</param>
                    </params>
                  </action>
								</actions>
							</transition>
            </transitions>
          </state>
          <state id="resolved" _delta="if_exists">
            <flags/>
            <transitions>
              <transition id="ev_reopen" _delta="redefine">
								<target>assigned</target>
								<actions>
                   <action>
                    <verb>GainEXP</verb>
                    <params>
                      <param xsi:type="int">5</param>
                    </params>
                  </action>
								</actions>
							</transition>
              <transition id="ev_close" _delta="redefine">
								<target>closed</target>
								<actions>
									<action>
										<verb>SetCurrentDate</verb>
										<params>
											<param xsi:type="attcode">close_date</param>
										</params>
									</action>
                  <action>
										<verb>GainBonusEXP</verb>
										<params>
											<param xsi:type="int">5</param>
										</params>
									</action>
								</actions>
							</transition>
            </transitions>
          </state>
        </states>
      </lifecycle>
      <methods>
      	<method id="GainEXP" _delta="define">
        <static>false</static>
        <access>public</access>
        <type>LifecycleAction</type>
        <code>
          <![CDATA[	
          public function GainEXP($exp)
          {      
            $sOQL = "SELECT Playerinfo WHERE player = :current_user->id";
            try{
              $oSearch = DBObjectSearch::FromOQL($sOQL);
              $oSearch->AllowAllData();
            }
            catch (OQLException $e)
            {
              $this->m_aWebrequestErrors[] = "query syntax error for recipient '$sOqlAttCode'";
              return $e->getMessage();
            }
            $oSet = new DBObjectSet($oSearch, array() /* order */, array());
            if($oSet->Count() > 0)
            {
              $oObj = $oSet->Fetch();
              $oObj->Set('exp', $oObj->Get('exp') + $exp);
              $oObj->DBUpdate();
            } 
            else{
              return;
            }
          }]]>
        </code>
				</method>
        <method id="GainBonusEXP" _delta="define">
          <static>false</static>
          <access>public</access>
          <type>LifecycleAction</type>
          <code>
            <![CDATA[	
            public function GainBonusEXP($exp)
            {      
              $agent_id = $this->Get('agent_id');
              $sOQL = "SELECT Playerinfo WHERE player = $agent_id";
              try{
                $oSearch = DBObjectSearch::FromOQL($sOQL);
                $oSearch->AllowAllData();
              }
              catch (OQLException $e)
              {
                $this->m_aWebrequestErrors[] = "query syntax error for recipient '$sOqlAttCode'";
                return $e->getMessage();
              }
              $oSet = new DBObjectSet($oSearch, array() /* order */, array());
              if($oSet->Count() > 0)
              {
                if($this->Get('user_satisfaction') == 4) $exp *= 0;
                if($this->Get('user_satisfaction') == 3) $exp *= 0.5;
                //user_satisfaction == 2 exp bleibt gleich
                if($this->Get('user_satisfaction') == 1) $exp *= 2;
                $exp = (int) $exp;
                $oObj = $oSet->Fetch();
                $oObj->Set('exp', $oObj->Get('exp') + $exp);
                $oObj->DBUpdate();
              } 
              else{
                return;
              }
            }]]>
          </code>
				</method>
      </methods>
    </class>

    <class id="Problem" _delta="if_exists">
      <fields/>
      <presentation/>
      <lifecycle>
        <attribute/>
        <stimuli/>
        <states>
          <state id="new" _delta="if_exists">
            <flags/>
            <transitions>
              <transition id="ev_assign" _delta="redefine">
								<target>assigned</target>
								<actions>
									<action>
										<verb>SetCurrentDate</verb>
										<params>
											<param xsi:type="attcode">assignment_date</param>
										</params>
									</action>
                  <action>
                    <verb>GainEXP</verb>
                    <params>
                      <param xsi:type="int">5</param>
                    </params>
                  </action>
								</actions>
							</transition>
            </transitions>
          </state>
          <state id="assigned" _delta="if_exists">
            <flags/>
            <transitions>
              <transition id="ev_reassign" _delta="redefine">
                <target>assigned</target>
                <actions>
                  <action>
                    <verb>GainEXP</verb>
                    <params>
                      <param xsi:type="int">5</param>
                    </params>
                  </action>
                </actions>
              </transition>
              <transition id="ev_resolve" _delta="redefine">
                <target>resolved</target>
                <actions>
                  <action>
                      <verb>SetCurrentDate</verb>
                      <params>
                          <param xsi:type="attcode">resolution_date</param>
                      </params>
                  </action>
                  <action>
                    <verb>GainEXP</verb>
                    <params>
                      <param xsi:type="int">25</param>
                    </params>
                  </action>
                </actions>
              </transition>
            </transitions>
          </state>
          <state id="resolved" _delta="if_exists">
            <flags/>
            <transitions>
              <transition id="ev_reassign" _delta="redefine">
                <target>assigned</target>
                <actions>
                  <action>
                    <verb>GainEXP</verb>
                    <params>
                      <param xsi:type="int">5</param>
                    </params>
                  </action>
                </actions>
              </transition>
            </transitions>
          </state>
        </states>
      </lifecycle>
      <methods>
      	<method id="GainEXP" _delta="define">
        <static>false</static>
        <access>public</access>
        <type>LifecycleAction</type>
        <code>
          <![CDATA[	
          public function GainEXP($exp)
          {      
            $sOQL = "SELECT Playerinfo WHERE player = :current_user->id";
            try{
              $oSearch = DBObjectSearch::FromOQL($sOQL);
              $oSearch->AllowAllData();
            }
            catch (OQLException $e)
            {
              $this->m_aWebrequestErrors[] = "query syntax error for recipient '$sOqlAttCode'";
              return $e->getMessage();
            }
            $oSet = new DBObjectSet($oSearch, array() /* order */, array());
            if($oSet->Count() > 0)
            {
              $oObj = $oSet->Fetch();
              $oObj->Set('exp', $oObj->Get('exp') + $exp);
              $oObj->DBUpdate();
            } 
            else{
              return;
            }
          }]]>
        </code>
				</method>
      </methods>
    </class>
  </classes>
  <menus>
    <menu id="Gamification" xsi:type="MenuGroup" _delta="define">
      <rank>150.45</rank>
    </menu>
    <menu id="Playerinfo:Player" xsi:type="NewObjectMenuNode" _delta="define">
      <rank>1</rank>
      <parent>Gamification</parent>
      <class>Playerinfo</class>
    </menu>
    <menu id="Playerinfo:Highscore" xsi:type="DashboardMenuNode" _delta="define">
      <rank>1</rank>
      <parent>Gamification</parent>
      <class>Playerinfo</class>
      <definition>
        <dashboard>
          <layout>DashboardLayoutOneCol</layout>
          <title/>
          <auto_reload>
            <enabled>false</enabled>
            <interval>300</interval>
          </auto_reload>
          <cells>
            <cell id="0">
            <rank>0</rank>
            <dashlets>
              <dashlet id="CUSTOM__ID_row0_col0_1" xsi:type="DashletObjectList">
                <rank>0</rank>
                <title>Alle Spieler</title>
                <query>SELECT Playerinfo</query>
                <menu>true</menu>
              </dashlet>
            </dashlets>
            </cell>
            <cell id="1">
              <rank>1</rank>
              <dashlets>
                <dashlet id="CUSTOM__ID_row1_col0_2" xsi:type="DashletGroupByBars">
                  <rank>0</rank>
                  <title>Highscore</title>
                  <query>SELECT Playerinfo</query>
                  <group_by>nickname</group_by>
                  <style>bars</style>
                  <aggregation_function>max</aggregation_function>
                  <aggregation_attribute>score</aggregation_attribute>
                  <limit/>
                  <order_by>function</order_by>
                  <order_direction>desc</order_direction>
                </dashlet>
              </dashlets>
            </cell>
            <cell id="2">
              <rank>2</rank>
              <dashlets>
                <dashlet id="0" xsi:type="DashletEmptyCell">
                 <rank>0</rank>
                </dashlet>
              </dashlets>
            </cell>
          </cells>
        </dashboard>
      </definition>
    </menu>
  </menus>
  <user_rights>
    <groups>
    </groups>
    <profiles>
    </profiles>
  </user_rights>
  <dictionaries>
      <dictionary id="EN US">
      <entries>
        <entry id="Class:Playerinfo/UniquenessRule:nickname_uniqueness" _delta="define">
          <![CDATA[There is already a Player with the nickname '$this->nickname$']]>
        </entry>
      </entries>
    </dictionary>
    <dictionary id="DE DE">
      <entries>
        <entry id="Class:Playerinfo/UniquenessRule:nickname_uniqueness" _delta="define">
          <![CDATA[Es existiert bereits ein Spieler mit dem Nicknamen '$this->nickname$']]>
        </entry>
      </entries>
    </dictionary>
  </dictionaries>
  <branding>
    <main_logo _delta="force">itomig_gamifikation/images/atom.png</main_logo>
    <main_logo_compact _delta="force">itomig_gamifikation/images/atom(2).png</main_logo_compact>
    <login_logo _delta="force">itomig_gamifikation/images/atom(2).png</login_logo>
    <portal_logo _delta="force">itomig_gamifikation/images/atom(2).png</portal_logo>
    <themes>
      <imports>
        <import id="css-variables">../css/css-variables.scss</import>
      </imports>
      <stylesheets>
        <stylesheet id="jqueryui">../css/ui-lightness/jqueryui.scss</stylesheet>
        <stylesheet id="main">../css/light-grey.scss</stylesheet>
      </stylesheets>
    </themes>
  </branding>
</itop_design>
